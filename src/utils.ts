import * as PIXI from 'pixi.js';

export const centeringItem = (view: HTMLCanvasElement | PIXI.Container, item: PIXI.Container): PIXI.Point => {
    const position = new PIXI.Point();
    position.x = (view.width - item.width) / 2;
    position.y = (view.height - item.height) / 2;
    return position;
};


export const itemsIntersect = (a: any, b: any): boolean => {
    if (!a || !b) {
        return false;
    }
    if (a.type === b.type) {
        return false;
    }
    const ab = a.getBounds();
    const bb = b.getBounds();
    return ab.x + ab.width > bb.x && ab.x < bb.x + bb.width && ab.y + ab.height > bb.y && ab.y < bb.y + bb.height;
};

export const mapMatrix = [
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 2, 2, 3, 0, 0, 0, 2, 3, 2, 0, 2, 0, 2, 3, 2, 0, 0, 0, 0, 3, 2, 2, 0, 0, 1],
    [1, 0, 0, 2, 2, 3, 0, 0, 0, 3, 3, 3, 0, 2, 0, 3, 3, 3, 0, 0, 0, 0, 3, 2, 2, 0, 0, 1],
    [1, 0, 0, 2, 2, 3, 0, 0, 0, 2, 3, 2, 0, 2, 0, 2, 3, 2, 0, 0, 0, 0, 3, 2, 2, 0, 0, 1],
    [1, 0, 0, 2, 2, 3, 0, 0, 0, 2, 3, 2, 0, 2, 0, 2, 3, 2, 0, 0, 0, 0, 3, 2, 2, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1],
    [1, 0, 0, 0, 0, 4, 4, 4, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 4, 4, 4, 0, 0, 3, 3, 1],
    [1, 1, 1, 2, 2, 4, 4, 4, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 4, 4, 4, 2, 2, 1, 1, 1],
    [1, 3, 3, 0, 0, 4, 4, 4, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 4, 4, 4, 0, 0, 0, 0, 1],
    [1, 3, 3, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 2, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 5, 0, 0, 0, 0, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1],
    [1, 0, 2, 2, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 2, 2, 3, 2, 0, 0, 1],
    [1, 0, 3, 2, 3, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 6, 2, 2, 3, 2, 0, 0, 1],
    [1, 0, 3, 2, 3, 0, 0, 2, 2, 0, 0, 2, 2, 2, 2, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 3, 2, 3, 0, 0, 2, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 2, 8, 9, 10, 11, 0, 0, 0, 1],
    [1, 0, 3, 2, 3, 0, 0, 2, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 7, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
];
